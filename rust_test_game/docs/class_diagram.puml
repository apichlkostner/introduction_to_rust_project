@startuml
package rust_test_game {
	class Game {
		- world: World
		- last_time: Instant
		- rx: Option<Receiver<SpriteData>>
		- tx: Option<Sender<()>>
		- handles: Vec<JoinHandle<()>>
		+ new()
		+ init()
		+ game_loop()
		+ quit()
	}

	class World {
		- player_sprite: Sprite
		- sprites: Vec<Sprite>
		+ empty()
		+ set_player_sprite(...)
		+ add_sprite(...)
		+ get_player_sprite()
		+ get_sprites()
		+ move_player(...)
	}

	class Sprite {
		- c_sprite: *mut ffi::Sprite
		+ x: f32
		+ y: f32
		+ new(...)
		+ get_c_sprite()
		+ move_pos(...)
	}

	class SpriteData {
		+ width: i32
		+ height: i32
		+ x: f32
		+ y: f32
		+ r: i32
		+ g: i32
		+ b: i32
		+ from_json_string(data: &str)
	}

	class sprite_creator {
		+ get_new_sprite_data()
	}

	class control {
		+ process_input(world: &mut World, dt: f32)
	}

	class view {
		+ render(world: &World)
	}

	class logging {
		+ init_logger()
	}

	Game "1" o-- "1" World
	World "1" o-- "*" Sprite
	Game "1" o-- "*" JoinHandle
	Game "1" o-- "1" SpriteData
	Game ..> control : uses
	Game ..> view : uses
	Game ..> sprite_creator : uses
	Game ..> logging : uses
	control ..> World
	view ..> World
	sprite_creator ..> SpriteData
	World ..> Sprite
}
@enduml
